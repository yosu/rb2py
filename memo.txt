# 主題

Rubyのメンタルを持ちながらPythonに入門するとき、どう切り替えていったらスムーズかを伝える。


長さ: 5分で読める
読者: Pythonを触ってみようと思っているRubyist

# 目標規定分

Rubyを普段書いていて、Pythonでは書いたことがない人。
Pythonで押さえるべきところを押さえた上でPythonのコードで簡単なスクリプトをさらっと書けるようになること。
メンタルとしてどういうところは同じでどういうところが違うのか、諦めるべきところが分かって自分で前に進めるようになること。


Rubyの頭からPythonの頭に切り替えるとき、何を押さえたらよいか？

# 序論

読むべきか、と準備。
主題を伝える。

なぜ取り上げたか？

自分がちょうど切り替わった、その中で今ちょうどつかめた気がする。
もし、最初に指針があればもっと楽だったと思うので、
どういうことを把握しておけば迷わずスムーズに移行できるかをまとめる。


特に一般的なプログラマーを対象としている。
機械学習に強いとか、周辺ライブラリの比較は特にしない。
自分が一からコードを書くことになったら、どういう違いを意識しなければならないか、そこをまとめる。

特に、こっちの言語だったらこうかけるのに、が書けなかったりする。
それはそもそも根本的な思想の違いだったりする。
書ける可能性もある。

しかし、そもそもその言語らしい書き方があるのであれば、
そちらに従って書く方がいろんな摩擦がなくていい。

要は他から来た時、どれが郷に入っては郷に従うべきなのか。
共通認識でいいのかが分からないと従う気があっても不毛な遠回りをしてしまうということだ。

それを避けられるように根本的な違いはなんなのか、基本的なビルディングブロックレベルで
どう押さえておけばいいのかをまとめておきたい。

（Pythonを書き始めて半年というレベルでまだ自信はない。）
間違いがあれば是非指摘して欲しい。


PythonとRubyはかなり似ているが全然違う。
動的型付けの言語として同じようなスピード感でコードを書くことができる。
やりたいことを素直に書いていけばいい。進化のスピードも早いしコミュニティも素晴らしい。

違うのは問題解決をしていくときに、どう組み立てていくのか。
どういう風に問題を分解したり、分解した要素を組み合わせていくのか、というところが違う。

コードとして、問題を解決するときのモデリングの仕方が違う。
そしてそれが言語の標準的な枠組みやライブラリによって整えられている。

レゴで城を作るのか、
全く同じイラストを、Photoshopを使って書くのかIllustratorを使って書くのかの違いのようなもの。
もうちょっと誰にでも分かりやすい例えないかなー。
最終的な結果は同じでも、それを組み上げるまで手順やパーツは異なる。


根本的なパーツの違いもある。

Symbolの不在。型に対する態度。
ブロック構文、list comprehension。
module
値の変換


Rubyは統合的。自由。Rubyの上で遊んでいる感覚が強い。
Pythonは個別的。フレームワークとして、もう少し踏み込んでいる。Pythonに乗っかっている感覚が強い。

__repl__というインタフェースまである。言語から一歩アプリケーションに踏み込んでいる。
標準ライブラリの充実度。特にアプリケーションで必要となるような便利なものが用意されている。
textwrap, pprint。

----

トピックリスト

- 根本的なビジョンの違い
- Zen of python / まつもとさんの思想
- ブロック構文
- 3.times使いたいが、、
- 値の変換
- データモデルとクラス大統一理論
- abc
- struct
- tuple
- symbolの不在
- hashの扱い
- map, filter, reduce
- typing
- enum
- module


## memo

Rubyはオブジェクトが中心的な役割を果たす。
クラスもオブジェクト。

基本的な構文を覚えたらあとはオブジェクトが何をできるか、
で物事を考えることになる。
Classクラスもオブジェクト。シンプルなルールの大統一理論が根底にある。
その分、特異クラスやクラスメソッド、privateなどの仕組みを理解するのがちょっと厄介。


Pythonはちょっと違う。
同じようにオブジェクトの概念があるがそれだけが中心的な役割ではない。

データモデルという概念を理解することが重要。
標準で特定の表現に対して、実装すべきインタフェースがあらかじめ定まっている。
__xxxx__という形式を共通のインタフェースとしている。

ビルトインの関数とそれが強調することで、言語としての標準的なデザインに乗って
オブジェクトが表現力を持って扱えるようになる。

データモデルを基軸とした、言語標準のインタフェースを覚えることが、
読みやすくPythonらしいコードを書く上で重要になる。


Rubyで特に特徴的で便利、僕が愛してやまないのがブロック構文だ。
Rubyで中心的な役割を果たしているといってもいい。



Pythonには型を明示する仕組みが標準で用意されている（3.x）。
Rubyは作者の松本さんが型を書きたくない、書かずに済む方向性を目指している。

進化の速度はどちらも早い。
基本的な構文に対する修正や、便利な構文、標準ライブラリの進化など、
大雑把に言うと同じスピードに感じる。どちらもエキサイティング。
開発に参加してないのに勝手なこと言ってるなー。




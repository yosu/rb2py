# はじめに

普段Rubyを書いていて、これからPython(バージョン3)を書くという人向けに
サーフィンで言えば波に乗っているような感覚でコードを書いていけるように
基礎的な情報をまとめたいと思います。

ゴールとしては簡単なスクリプト程度は違和感なくPythonでコードが書けるようになることを目指します。
実際にコードを書いていくときに必要となる情報を、順を追ってコード例で説明します。
あまり細かいところには深入りせず必要に応じて情報源へのリンクで補うつもりです。

また、Python3 が前提です。

それでははじめましょう。

## プリミティブな要素

よく利用する基本的な要素の比較です。すべてのビルトインタイプを網羅しているわけではありません。


```rb
n = nil
b = true
i = 100
f = 1.5
a = [1, 2, 3] # Array
s = 'hello' " world"
sym = :symbol
h = {a: 'apple', b: 'banana'}
```

```python
n = None
b = True
i = 100
f = 1.5
l = [1, 2, 3] # list
s = 'hello' " world"
# シンボルは存在しないので文字列を使う
h = {'a': 'apple', 'b': 'banana'}
```

`nil` やブール値は表記が違いますが概念として対応しています。

微妙な違いとしてRubyの配列表記でPythonではリストを表します。
要素の取り出しやイテレーションなど基本的な操作としてできることはほとんど変わりません。
リスト操作については後述します。

# 値の表現

## 文字列への変数埋込と標準出力

```ruby
s = 'apple'
i = 100

result = "#{s} #{i}"
puts(result)
# => apple 100
```

```python
s = 'apple'
i = 100

result = f'{s} {i}'
print(result)
```

Rubyで文字列に値を埋め込む場合はダブルクォートの文字列にする必要がありますが、
Pythonの場合はシングルクォート文字列、ダブルクォート文字列どちらでも構いません。

## 数値などのフォーマッティング（printf）

```rb
```

```python
# https://docs.python.jp/3/reference/lexical_analysis.html#formatted-string-literals
```

# 値の加工

## 文字列から数値への変換、数値から文字列への変換
## 文字列と数値の相互変換

```rb
i = '100'.to_i
puts(i + 10)
# => 110

s = 100.to_s
puts(s + ' yen')
# => 100 yen
```

```python
i = int('100')
print(i + 10)
# => 110

s = str(100)
print(s + ' yen')
# => 100 yen
```

Pythonではビルトイン型のコンストラクタで値が変換できるようになっています。
自作のクラスでも真似ると一貫した見た目になります。


## 配列/リストの長さ取得

```ruby
l = [1, 2, 3]

result = l.length
puts(result)
# => 3

result = l.size
puts(result)
# => 3
```

```python
l = [1, 2, 3]

result = len(l)
puts(result)
```

Rubyでは長さの取得に複数のインタフェースがあります。表現として自然な方を好みに応じて選ぶことができます。

一方でPythonは `len()` というビルトイン関数を使って取得します。
これは単にリストのためだけでなく、Pythonでオブジェクトから__長さ__を取得するための共通のインタフェースです。
Pythonが言語のフレームワークとしてAPIを用意しているのです。

つまり、組み込み型だけでなく自作クラスのオブジェクトであっても、
同じようにこの `len()` インタフェースを通じて長さを返すことができるような仕組みが備わっています。

この仕組みを定義しているのがデータモデルと呼ばれるものです。

# このPythonの標準的なデータとそのインタフェースを定義をデータモデルと呼びます。

データモデルを理解し、`len()` のような標準インタフェースと協調して動作するオブジェクトを作り、
それを使ってコーディングすることで、Pythonで書かれるコードの表現に一貫性を持たせることができます。


# この`len()` のような標準のインタフェースが定義されており、それが組み込み型だけでなく自作のオブジェクトも協調して
# 動作できるようになっているのがPythonのAPIの特徴です。


## 配列/リストの加工


```rb
l = [1, 2, 3]

# マップ
l.map {|v| v * v}
# => [1, 4, 9]

# フィルター
l.select {|v| v.even? }
# => [2]

l.reject {|v| v.even? }
# => [1, 3]

# 縮約
l.reduce {|acc, v| acc + v}
# => 6

l.sum
# => 6

l.all? {|v| v.even? }
# => false

l.any? {|v| v.even? }
# => true
```

```python
# マップ
[v * v for v in l]
# => [1, 4, 9]

# フィルター
[v for v in l if v % 2 == 0]
# => [2]

[v for v in l if v % 2 != 0]
# => [1, 3]

# 縮約
from functools import reduce

reduce(lambda acc, v: acc + v, l)
# => 6

sum(l)
# => 6

all([x % 2 == 0 for x in l])
# => False

any([x % 2 == 0 for x in l])
# => True
```

Rubyでは配列オブジェクト自身の持つメソッドが起点となって、その要素を加工します。

Pythonではリスト内包表記が中心的な役割を果たします。
マップやフィルタ処理もさることながら、`all()` や `any()` といった処理のインタフェースも
評価関数を受け取らず、リスト内包表記が利用できることを意識したインタフェースになっています。


## 配列/リストのソート

```ruby
l = [1, -2, 3, 8, -5]

# 昇順ソート（配列自身は変更しない）
l.sort
# => [-5, -2, 1, 3, 8]
l
# => [1, -2, 3, 8, -5]

# 降順ソート（配列自身は変更しない）
l.sort.reverse
# => [8, 3, 1, -2, -5]

# 配列自身を変更
l.sort!
# => [-5, -2, 1, 3, 8]
l
# => [-5, -2, 1, 3, 8]

# ソート基準指定
# https://ref.xaio.jp/ruby/classes/enumerable/sort_by
l = ["apple", "pineapple", "banana", "strawberry"]
l.sort_by {|e| e.length }
# => ["apple", "banana", "pineapple", "strawberry"]
```


```python
# https://docs.python.jp/3/howto/sorting.html
# 昇順ソート（配列自身は変更しない）
l = [1, -2, 3, 8, -5]
sorted(l)
# => [-5, -2, 1, 3, 8]

# 降順ソート
sorted(l, reverse=True)
# => [8, 3, 1, -2, -5]

# 配列自身を変更
l.sort()
# => None
l
# => [-5, -2, 1, 3, 8]

# ソート基準指定
l = ["apple", "pineapple", "banana", "strawberry"]
sorted(l, key=len)
# => ['apple', 'banana', 'pineapple', 'strawberry']
```

Rubyはやはり起点となるオブジェクトが中心に処理がスタートします。

`sorted()` 関数を使った場合はリスト自身を変更しませんが、リストの持つ `sort()` メソッドを
呼んだ場合はリスト自身を変更します。同じインタフェースでRubyとは挙動が異なるので注意が必要です。


## イテレーション

## ブール値評価

ブール値評価はRubyとPythonの大きな違いの一つです。

```ruby
nil ? true : false
# => false

0 ? true : false
# => true

'' ? true : false
# => true

[] ? true : false
# => true

{} ? true : false
# => true
```

RubyではFalseClassとNilクラスのインスタンス（`false`、`nil`）のみが偽として評価されます。
https://docs.ruby-lang.org/ja/latest/class/FalseClass.html

基本的にはきちんとブール値に評価してあげることになります。
`nil` が `false` と評価されることで、オブジェクトの存在チェックのイディオムとしてif文を使ったりもします。

```ruby
if o
  o.call_some_method()
end

# すでに初期化されていなければ初期化する
def cached_obj()
  o ||= Obj()
  o
end

def safe_call()
  o && o.some_method()
end
```

ブール値でない場合は、`nil` でないものとして処理を継続したい場合

```python
True if None else False
# => False

True if 0 else False
# => False

True if 0.0 else False
# => False

True if '' else False
# => False

True if [] else False
# => False

True if {} else False
# => False
```

Pythonではゼロとしての意味を持つオブジェクトが偽として評価されます。

リストのようなシーケンスであれば空の値が偽を表します。
このため、空文字列も同じ理由から（空のシーケンス）偽を表します。

また、空リスト（空文字列）かのチェックは空リストと比較したり `len()` を使うのではなく、単にブール値として評価することが推奨されています。

```python
if l == []: # Bad
  pass

if l: # Good
  pass
```

自作のクラスでも同じ振る舞いが持たせられるよう、データモデルが定義されています。
`__len__()` メソッド（コレクションクラス向け）、または `__bool__()` メソッドを定義して
あげることでif文や論理演算などブール値評価される場所でそのメソッドによって評価されるようになります。

また、`__bool__()` が定義されておらず、 `__len__()` が定義されていた場合は `__len__()` がブール値評価の対象になります。

これにより、`__len__()` を定義するようなコレクションクラスは、
ブール値の評価で自動的に標準のリストと同じ振る舞いになり、一貫性が保たれることになります。


## クラス

クラスについて違いをあげるときりがないので少しだけ。

- コンストラクタ
- クラスメソッド
- スーパークラスの呼び出し



Pythonの特徴

* データモデルという形で、オブジェクトとして良くあるパターンに対するインタフェースが
デザインされている。
* フレームワークとして良くデザインされたAPIを持つ

Rubyの特徴

* すべてがオブジェクト
* オブジェクトの持つメソッドがやりとりの中心
* ルールや制限が少なく、いろんな表現を許容する寛容さを持つ


感覚として、Rubyのルールを覚えたらあとは自由に遊んでいるような感覚。
PythonはPythonの上に乗っかって仕事をしているイメージ。




